service: serverless-da-boilerplate

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-split-stacks
  - serverless-aws-documentation
  #- serverless-domain-manager

# Custom variables
custom:
  stage: ${env:NODE_ENV}
  documentation: ${file(documentation.yml)}
  variables:
    ENV: ${file(env.yml):${self:custom.stage}-${self:provider.region}}
  webpack:
    includeModules: true
    packager: 'npm'
  # profiles for each environment
  profiles:
    dev: profile-dev
    stage: profile-stage
    prod: profile-prod
  # Get Outputs from other CFs
  #stackOutputs:
    #lambdaSubnet1: "${cf:${self:custom.variables.ENV.STACK_NAME}.SubnetLambdaPrivateId}"
    #lambdaSubnet2: "${cf:${self:custom.variables.ENV.STACK_NAME}.SubnetLambdaPrivate2Id}"
    #rdsEndpoint: "${cf:${self:custom.variables.ENV.STACK_NAME}.RDSEndpoint}"
  #customDomain:
    #domainName: api.${self:provider.region}.${self:custom.stage}.${self:custom.variables.ENV.DOMAIN}
    #basePath: ${self:custom.variables.ENV.API_VERSION}
    #certificateName: '*.${self:provider.region}.${self:custom.stage}.${self:custom.variables.ENV.DOMAIN}'
    #createRoute53Record: false
    #endpointType: 'regional'

provider:
  name: "aws"
  runtime: "nodejs8.10"
  stage: "${self:custom.stage}${self:custom.variables.ENV.API_VERSION_STAGE_FRIENDLY}"
  region: "${env:AWS_REGION, 'us-east-1'}"
  profile: ${env:AWS_PROFILE}
  memorySize: "128"
  timeout: "15"
  versionFunctions: "false"
  environment:
    NODE_ENV: "${self:custom.stage}"
    MIN_APP_VERSION: "${self:custom.variables.ENV.MIN_APP_VERSION}"
    #DB_USER: ${self:custom.variables.ENV.DB_USER}
    #DB_NAME: "${self:custom.variables.ENV.DB_NAME}"
    #DB_PORT: "${self:custom.variables.ENV.DB_PORT}"
    #DB_PASSWORD: "${self:custom.variables.ENV.DB_PASSWORD}"
    #DB_HOST: "${self:custom.stackOutputs.rdsEndpoint}"
  #apiKeys:
    #- my-api-key
  usagePlan:
    quota:
      limit: 5000
      period: DAY
    throttle:
      burstLimit: 100
      rateLimit: 50
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: arn:aws:logs:${self:provider.region}:*:*
    #- Effect: Allow
    #  Action:
    #    - dynamodb:BatchGetItem
    #    - dynamodb:BatchWriteItem
    #    - dynamodb:GetItem
    #  Resource:
    #    Fn::Join:
    #      - ':'
    #      - - arn:aws:dynamodb
    #        - Ref: AWS::Region
    #        - Ref: AWS::AccountId
    #        - "table/${self:custom.variables.COMMUNITY_DYNAMO_TABLE}"
    #- Effect: Allow
    #  Action:
    #    - sns:Publish
    #  Resource: ${self:custom.stackOutputs.snsEmailTopicArn}

package:
  individually: "true"

functions:
  misc: ${file(functions/misc.yml)}
  
